# Complex scenario simulating clients using all types of supported protocols
# (Do53 - UDP and TCP, DoH, DoT, and DoQ).
#
# Clients are randomly assigned exactly one of the configured traffic settings.
# The assignment respects the configured weights. In the following example:
#   60/110 of clients use UDP
#    5/110 + 5/110 of clients use TCP (with/without utilizing idle connections)
#   10/110 + 5/110 of clients use DoT (with/without TLS Session Resumption)
#   10/110 + 5/110 of clients use DoH (using GET or POST)
#   10/110 of clients use DoQ
#
# You can use this example as a starting point to create your own
# configurations with various clients and traffic distribution. Refer to other
# example configs for more ideas of clients types.
[traffic]

# DNS-over-UDP clients.
[traffic.UDP]
protocol = "udp"
weight = 60

# Well-behaved DNS-over-TCP clients.
[traffic.TCP]
protocol = "tcp"
weight = 5

# Aggressive DNS-over-TCP clients.
[traffic.TCP-no_idle]
protocol = "tcp"
weight = 5
idle_timeout_s = 0

# Well-behaved DNS-over-TLS clients.
[traffic.DoT]
protocol = "dot"
weight = 10

# Well-behaved DNS-over-TLS clients without TLS Session Resumption.
[traffic.DoT-no_tickets]
protocol = "dot"
weight = 5
gnutls_priority = "NORMAL:%NO_TICKETS"

# Well-behaved DNS-over-HTTPS clients using GET method.
[traffic.DoH-GET]
protocol = "doh"
weight = 10
http_method = "GET"

# Well-behaved DNS-over-HTTPS clients using POST method.
[traffic.DoH-POST]
protocol = "doh"
weight = 5
http_method = "POST"

# DNS-over-QUIC clients.
[traffic.DoQ]
protocol = "doq"
weight = 10


[charts]

[charts.latency]
type = "latency"

[charts.response-rate]
type = "response-rate"

[charts.response-rate-rcodes]
type = "response-rate"
rcodes-above-pct = 0
